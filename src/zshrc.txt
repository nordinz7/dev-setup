# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH


# Use antigen
source $HOME/antigen.zsh


# Use Oh-My-Zsh
antigen use oh-my-zsh


# Set theme
antigen theme robbyrussell


# Set plugins (plugins not part of Oh-My-Zsh can be installed using
# githubusername/repo)
antigen bundle git
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-syntax-highlighting


if [[ "$OSTYPE" == "darwin"* ]]; then
   antigen bundle osx
fi


# Apply changes
antigen apply


# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools


# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )


# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"


# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"


# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time


# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13


# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"


# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"


# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"


# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"


# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"


# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"


# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"


# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)


source $ZSH/oh-my-zsh.sh


# User configuration


# export MANPATH="/usr/local/man:$MANPATH"


# You may need to manually set your language environment
# export LANG=en_US.UTF-8


# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi


# Compilation flags
# export ARCHFLAGS="-arch x86_64"


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


#git aliases
alias gs="git stash"
alias gsp="git stash pop"
alias gcm="git commit -m"
alias ggpullum="git pull upstream master"
alias ggpullud="git pull upstream develop"
alias ggpushum="git push upstream master"
alias ggpushud="git push upstream develop"
alias ggpullall="git fetch && git checkout master && ggpull && git checkout develop && ggpull"
alias ggpullallm="git fetch && git checkout main && ggpull && git checkout develop && ggpull"
alias ggpushallm="git checkout main && ggpull && git push origin main && git checkout develop && ggpull && git push origin develop && git push origin --tags"
alias ggpushall="git checkout master && ggpull && git push origin master && git checkout develop && ggpull && git push origin develop && git push origin --tags"
alias gfhs="git flow hotfix start"
alias gfhf="git flow hotfix finish"
alias gffs="git flow feature start"
alias gfff="git flow feature finish"
alias gfrs="git flow release start"
alias gfrf="git flow release finish"

#cloud aliases
alias cloudcdsl='gcloud config configurations activate swift && gcloud config set project argon-edge-198805 && kubectl config use-context gke_argon-edge-198805_asia-southeast1-a_sl-prod && kubectl get pods'
alias cloudcds='gcloud config configurations activate default && gcloud config set project shipx-203101 && kubectl config use-context gke_shipx-203101_asia-southeast1-a_shipx-prod && kubectl get pods'


#docker aliases
alias dc='docker-compose'
alias dcup='sudo docker-compose up -d'
alias dcstop='sudo docker-compose stop'


#shipx aliases
alias upall='cd ~/dev/shipx/api && sudo docker-compose up -d && cd ../transport && sudo docker-compose up -d && cd ../entities && sudo docker-compose up -d && cd ../api'
alias stopall='cd ~/dev/shipx/api && sudo docker-compose stop && cd ../transport && sudo docker-compose stop && cd ../entities && sudo docker-compose stop && cd ../api'
alias upass='cd ~/dev/shipx/assets-static && dev'
alias upe='cd ~/dev/shipx/entities && dev'
alias upe1='cd ~/dev/shipx/entities && npm run build:watch'
alias upr='cd ~/dev/shipx/report && dev'
alias upr1='cd ~/dev/shipx/report && npm run build:watch'
alias uptp='cd ~/dev/shipx/transport-planner && dev'
alias uptp1='cd ~/dev/shipx/transport-planner && npm run build:watch'
alias upt='cd ~/dev/shipx/transport && dev'
alias upt1='cd ~/dev/shipx/transport && npm run build:watch'
alias upa='cd ~/dev/shipx/api && dev'
alias upa1='cd ~/dev/shipx/api && npm run build:watch'
alias upg='cd ~/dev/shipx/gateway && dev'
alias upg1='cd ~/dev/shipx/gateway && npm run build:watch'


#custom aliases
alias ls='exa -l'
alias dev="npm run dev"
alias ydev='yarn run dev'
alias update="brew update && brew upgrade && brew cu -ay && brew cleanup && pip3 install --upgrade $(pip3 list --outdated | awk 'NR>2 {print $1}')"
alias myip="ifconfig | grep broadcast | awk '{print \$2}'"
alias appv="cat package.json | grep version | awk '{print \$2}'"






eval $(ssh-agent)


# Function to manage git flow hotfix
gfh() {
 # Prevent git from opening an editor for merge commits and other prompts
 export GIT_MERGE_AUTOEDIT=no
 export GIT_EDITOR="echo Hotfix-$version >"  # Automatically input the tag message


 if [[ "$1" == "s" ]]; then
   # Ensure you're on master and it's up-to-date
   git checkout master
   git pull origin master


   if [ ! -f "package.json" ]; then
     echo "ERROR: package.json not found!"
     return 1
   fi


   # Read the current version from package.json
   local current_version=$(jq -r '.version' package.json)


   if [[ -z "$current_version" ]]; then
     echo "ERROR: Version not found in package.json!"
     return 1
   fi


   # Increment the patch version
   local new_patch=$(( $(echo $current_version | awk -F. '{print $3}') + 1 ))
   local new_version=$(echo $current_version | awk -F. -v patch=$new_patch '{print $1"."$2"."patch}')


   # Use the incremented version
   git flow hotfix start $new_version
 elif [[ "$1" == "f" ]]; then
   local branch_name=$(git rev-parse --abbrev-ref HEAD)
   local version_regex='^hotfix/([0-9]+\.[0-9]+\.[0-9]+)$'
   local version=""


   # Check if the branch name matches the expected hotfix pattern
   if [[ $branch_name =~ $version_regex ]]; then
     version="${BASH_REMATCH[1]}"
     echo "Extracted version from branch: $version"
   fi


   if [[ -z "$version" ]]; then
     echo "Branch name does not match expected format or no version captured. Trying package.json..."
     if [ -f "package.json" ]; then
       version=$(jq -r '.version' package.json)
       echo "Extracted version from package.json: $version"
     fi
   fi


   if [[ -z "$version" ]]; then
     echo "ERROR: Unable to determine the version from the current branch or package.json."
     echo "Branch name: $branch_name"
     echo "Expected version pattern from branch: 'hotfix/x.y.z'"
     [ -f "package.json" ] && jq -r '.version' package.json || echo "package.json does not exist."
     return 1
   fi


   # Finish the hotfix with the determined version and a custom message
   git flow hotfix finish $version -m "Hotfix-$version"
 else
   echo "Invalid command. Use 'gfh s' to start a new hotfix or 'gfh f' to finish a hotfix."
 fi
}


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
 local node_version="$(nvm version)"
 local nvmrc_path="$(nvm_find_nvmrc)"


 if [ -n "$nvmrc_path" ]; then
   local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")


   if [ "$nvmrc_node_version" = "N/A" ]; then
     nvm install
   elif [ "$nvmrc_node_version" != "$node_version" ]; then
     nvm use
   fi
 elif [ "$node_version" != "$(nvm version default)" ]; then
   echo "Reverting to nvm default version"
   nvm use default
 fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/nordin/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/nordin/Downloads/google-cloud-sdk/path.zsh.inc'; fi
export CLOUDSDK_PYTHON=python3
# The next line enables shell command completion for gcloud.
if [ -f '/Users/nordin/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/nordin/Downloads/google-cloud-sdk/completion.zsh.inc'; fi


source <(kubectl completion zsh)  # set up autocomplete in zsh into the current shell


eval "$(starship init zsh)"


# Created by `pipx` on 2024-06-24 06:05:39
export PATH="$PATH:/Users/nordin/.local/bin"

